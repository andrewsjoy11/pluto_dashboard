import pandas as pd
import dash_core_components as dcc
import dash_html_components as html
from base import app
from dash.dependencies import Output,Input
from functions import get_data
from datetime import datetime as dt
import plotly.graph_objs as go

print("started bus")
#getting data
df1=get_data()

list1=[10,20,30,80]

df1.dropna(axis=0,inplace=True)

layout_bus = html.Div([
    dcc.Tabs([
        dcc.Tab(label='Count of Rides of Each Client',value='bus1'),
        dcc.Tab(label='Revenue generated by each Client',value='bus2'),
        dcc.Tab(label='Performance of different Clients(over 2 months)',value='bus3'),
        dcc.Tab(label='Comparison of 2 clients(no:of rides)',value='bus4'),
        dcc.Tab(label='Individual Clients',value='bus5')
    ],id='bus-tab',
        value='bus1'),
    html.Div(id='buscontent')
])
# dates dropdown list
dates=list(df1['m&y'].unique())
dates.append("All")

#location dropdown list
loc=list(df1['job_loc'].unique())
loc.append("All Locations")

# job type dropdown list
jobt=list(df1['job_type'].unique())
jobt.append('Both')

# layout for Graph1
bus1 = html.Div([
    dcc.Dropdown(id='loc_bus1', options=[{'label': i, 'value': i} for i in loc],
                 style={'height': '30px', 'width': '60%'}, placeholder="Select the location"),
    html.Div([
        dcc.Dropdown(id='type_bus1',options=[{'label': i,'value': i} for i in jobt], style={'height': '30px', 'width': '60%'},
                     placeholder="Select the type of ride")
        ]),

    dcc.DatePickerRange(
        id='my-date-picker-range_1',
        min_date_allowed=dt(2017, 11, 1),
        max_date_allowed=dt(2019, 8, 21),
        initial_visible_month=dt(2018, 11, 1),
        end_date=dt(2019, 8, 21)
    ),
    # dcc.Graph(id='graph1')
    html.Div(id="bus_g1")
    ],
    className="graph"
)

#callback functions for graph1
@app.callback(Output('bus_g1','children'),
                [Input("loc_bus1", "value"),Input("type_bus1","value"), Input('my-date-picker-range_1', 'start_date'),
                 Input('my-date-picker-range_1','end_date')])
def update_graph1(location,type,start_date_1,end_date_1):
    if location == "All Locations":
        df = df1
    else:
        df = df1[df1['job_loc'] == location]


    if type == 'Both':
        df2 = df
    else:
        df2 = df[df['job_type'] == type]
    df2.reset_index(drop=True, inplace=True)

    df.dropna(subset=["new_date"], inplace=True)
    if start_date_1 is not None:
        dat=pd.to_datetime(start_date_1)
        start_date_1 = dt.strftime(dat, '%Y-%m-%d')

    if end_date_1 is not None:
        dat1=pd.to_datetime(end_date_1)
        end_date_1 = dt.strftime(dat1, '%Y-%m-%d')


    i = next(iter(df2[df2['new_date'] == start_date_1].index), 'no match')

    j = next(iter(df2[df2['new_date'] == end_date_1].index), 'no match')


    if(i=="no match"):
        i=0

    if(j=="no match"):
        j=len(df2)-3


    graph_1 = df2[i:j + 1]


    graph1_1 = graph_1['bus_name'].value_counts().sort_index()

    if(graph_1.empty==True):

        return html.Div('Dataframe is empty',)
    else:

        return html.Div(
            dcc.Graph(id='graph1',
             figure={'data': [{'x': graph1_1.index,
                       'y': graph1_1.values,'type':'bar'}],
                     'layout': {
              'title': 'Count of Rides of Each client'
                    }})
    )
#layout for graph2
bus2 = html.Div([
    html.Div([
        dcc.Dropdown(id='loc_bus2', options=[{'label': i, 'value': i} for i in loc],
                     style={'height': '30px', 'width': '60%'}, placeholder="Select the location")
    ]),
    html.Div([
        dcc.Dropdown(id='type_bus2',options=[{'label': i,'value': i} for i in jobt], style={'height': '30px', 'width': '60%'},
                     placeholder="Select the type of ride")
        ]),
    dcc.DatePickerRange(
        id='my-date-picker-range_2',
        min_date_allowed=dt(2017, 11, 1),
        max_date_allowed=dt(2019, 8, 21),
        initial_visible_month=dt(2018, 11, 1),
        end_date=dt(2019, 8, 21)
    ),

    html.Div(id="bus_g2")
])

# callback for graph2
@app.callback(Output('bus_g2', 'children'),
              [Input("loc_bus2", "value"),Input("type_bus2","value"),
               Input('my-date-picker-range_2', 'start_date'),Input('my-date-picker-range_2','end_date')])
def update_graph1(location,type,start_date,end_date):
    if start_date is not None:
        dat = pd.to_datetime(start_date)
        start_date = dt.strftime(dat, '%Y-%m-%d')

    if end_date is not None:
        dat1 = pd.to_datetime(end_date)
        end_date = dt.strftime(dat1, '%Y-%m-%d')

    # df1.set_index('new_date')

    # filtering location
    if location == "All Locations":
        b2_1 = df1
    else:
        b2_1 = df1[df1['job_loc'] == location]

    #filtering ride type
    if type == 'Both':
        b2_2 = b2_1
    else:
        b2_2 = b2_1[b2_1['job_type'] == type]

    b2_2.reset_index(drop=True, inplace=True)
    i = next(iter(b2_2[b2_2['new_date'] == start_date].index), 'no match')
    j = next(iter(b2_2[b2_2['new_date'] == end_date].index), 'no match')


    if(i=="no match"):
        i=0

    if(j=="no match"):
        j=len(b2_1)-3

    b2 = b2_2[i:j + 1]
    # b2=b2_2.loc[start_date:end_date]
    if (b2.empty == True):
        return html.Div("Dataframe is empty")
    else:
        return html.Div(
            dcc.Graph(id='graph1',
                  figure={'data': [{'x': b2.groupby(['bus_name'])['total_fare'].sum().index,
                  'y': b2.groupby(['bus_name'])['total_fare'].sum().values, 'type': 'bar'}],
         'layout': {
             'title': 'Revenue generated by each client'
                          }})
    )

#layout for graph3

list4_1=[]
for i in df1['bus_name'].unique():
    list4_1.append(i)

list4_2=[]
for i in df1["m&y"].unique():
    list4_2.append(i)

# list4_3=[]
# for i in df1["m&y"].unique():
#     list4_3.append(i)

bus3 = html.Div([
    html.Div([
        dcc.Dropdown(id='loc_bus3',options=[{'label': i,'value': i} for i in loc],style={'height': '30px', 'width': '60%'},value=loc[0],placeholder="Select the location")
        ]),
                    html.Div([
                        dcc.Dropdown(id='first_mon', options=[{'label': i, 'value': i} for i in list4_2],
                                     style={'height': '30px', 'width': '60%'},value=list4_2[1],
                                     placeholder="Select a month")
                    ]),
    dcc.Graph(id="bus_g3")
            ],
className='graph_3'
)
#callback functions for graph3
@app.callback(Output('bus_g3','figure'),
                [Input('loc_bus3','value'),Input("first_mon","value")])
def update_graph3(location,month1):
    if location=="All Locations":
        df_g3=df1
    else:
        df_g3=df1[df1['job_loc']==location]
    # if(month1 is None):
    #     month1='2019,5'

    df_g3.dropna(inplace=True)

    act_month = month1.split(',')
    act_month_str = str(act_month[1]) + "," + str(act_month[0])

    if act_month[0] == 1:
        pre_month = [12, int(act_month[1]) - 1]
    else:
        pre_month = [int(act_month[0]) - 1, act_month[1]]

    pre_month_str = str(pre_month[1]) + "," + str(pre_month[0])

    df_g3['y&m'] = df_g3['Year'].map(str) + ',' + df_g3['Month'].map(str)

    o = df_g3.groupby([df_g3['y&m'], df_g3['bus_name']])['bus_name'].count()
    this_month = o[act_month_str].sort_values().to_frame()
    last_month = o[pre_month_str].to_frame()
    df_3 = pd.merge(last_month, this_month, left_index=True, right_index=True)
    df_3['growth'] = ((df_3['bus_name_x'] / df_3['bus_name_y']) - 1) * 100
    figure = {'data':[{

            'x':df_3.index, 'y':df_3['growth'],'name':'% Perfomance','type':'bar'},
    {
        'x':df_3.index, 'y':df_3['bus_name_y'],'name':'Previous month','type':'bar'},
    {
        'x':df_3.index, 'y':df_3['bus_name_x'],'name':'Selected month','type':'bar'}
    ],
   'layout':{
        'title':'Performance of different clients(over 2 months)'
            }
         }
    return figure

#layout of graph4
bus4 = html.Div([
    dcc.Dropdown(id='loc_bus4',options=[{'label': i,'value': i} for i in loc],style={'height': '30px', 'width': '60%'},placeholder="Select the location"),

    dcc.Dropdown(id='name_bus4_1',options=[{'label': i,'value': i} for i in list4_1], style={'height': '30px', 'width': '60%'},placeholder="Select the name of business to be displayed"),

    dcc.Dropdown(id='name_bus4_2', options=[{'label': i, 'value': i} for i in list4_1],
                 style={'height': '30px', 'width': '60%'}, placeholder="Select the name of second business to be displayed"),


    dcc.DatePickerRange(
        id='my-date-picker-range',
        min_date_allowed=dt(2017, 5, 1),
        max_date_allowed=dt(2019, 8, 21),
        initial_visible_month=dt(2018, 11, 1),
        end_date=dt(2019, 8, 21)
    ),
    # html.Div(id='output-container-date-picker-range'),

dcc.Graph(id='bus_g4')
    ],
    className="graph_4"
)

#callback functions for graph4
@app.callback(Output('bus_g4','figure'),
                [ Input('loc_bus4','value'),
                    Input('name_bus4_1','value'),

                 Input('name_bus4_2','value'),
                 Input('my-date-picker-range', 'start_date'),
                 Input('my-date-picker-range', 'end_date')
                 ])
def update_graph4(loc4,bus_name_1,bus_name_2,start_date_4, end_date_4):
    df1.dropna(subset=["job_est_time"], inplace=True)
    if loc4=="All Locations":
        df4=df1
    else:
        df4=df1[df1['job_loc']==loc4
        ]
        df4.reset_index(drop=True, inplace=True)

    i = next(iter(df1[df1['new_date'] == start_date_4].index), 'no match')
    j = next(iter(df1[df1['new_date'] == end_date_4].index), 'no match')

    if (i == "no match"):
        i = 0

    if (j == "no match"):
        j = len(df1) - 3
    graph4 = df4[i:j+1]
    graph4_1 = graph4[graph4["bus_name"] == bus_name_1]
    graph4_2 = graph4[graph4["bus_name"] == bus_name_2]

    graph4_1 = graph4_1['new_date'].value_counts().sort_index()
    graph4_2 = graph4_2['new_date'].value_counts().sort_index()
    # print(graph4.head())
    #graph_2.index = day_2
    return {
              'data': [{
                  'x': graph4_1.index,
                       'y': graph4_1.values,'mode': 'bar','name':bus_name_1
              },
                  {
                      'x': graph4_2.index,
                      'y': graph4_2.values, 'mode': 'bar', 'name': bus_name_2
                  }
              ],
                     'layout': {
              'title': 'Comparison of 2 Clients'
                    }}


bus5 = html.Div([

        dcc.Dropdown(id='loc_bus5',options=[{'label': i,'value': i} for i in loc],style={'height': '30px', 'width': '60%'},value=loc[0],placeholder="Select the location")
        ,


        dcc.Dropdown(id='first_mon_5', options=[{'label': i, 'value': i} for i in list4_2],
                                 style={'height': '30px', 'width': '60%'},value=list4_2[5],
                                     placeholder="Select a month")
                    ,
    html.Div(id="graph5_1")
            ,
    html.Div(id="graph5_2")
            ,
    html.Div(id="graph5_3")
            ,
    html.Div(id="graph5_4")
            ],

)
@app.callback(Output('graph5_1','children'),
                [Input('loc_bus5','value'),Input("first_mon_5","value")])
def update_graph5(loc5,month1_5):
    print('graph5')
    df_g5=df1
    df_g5.dropna(inplace=True)
    o = df_g5.groupby([df_g5['m&y'], df_g5['bus_name']])['bus_name'].count()
    act_month_5 =  [1,2019]
    # act_month_str = str(act_month[0])+","+str(act_month[1])
    act_month_str_5 = str(act_month_5[1]) + "," + str(act_month_5[0])

    # selecting previous month -- done
    if act_month_5[0] == '1':
        pre_month_5= [12, (int(act_month_5[1])) - 1]

    else:
        pre_month_5 = [(int(act_month_5[0]) - 1), act_month_5[1]]
        print('else', pre_month_5)

    # pre_month_str = str(pre_month[0])+","+str(pre_month[1])
    pre_month_str_5 = str(pre_month_5[1]) + "," + str(pre_month_5[0])

    def filter_by(df_fun, constraints):
        """Filter MultiIndex by sublevels."""
        indexer = [constraints[name] if name in constraints else slice(None)
                   for name in df_fun.index.names]
        return df_fun.loc[tuple(indexer)] if len(df_fun.shape) == 1 else df_fun.loc[tuple(indexer),]

    pd.Series.filter_by = filter_by
    pd.DataFrame.filter_by = filter_by
    test = o.to_frame()
    test1 = test.filter_by({'bus_name': ['Variety Care']})
    l = []
    for i in range(len(test1.index)):
        l.append(test1.index[i][0])
    set(l)
    delta1 = test1['bus_name'].to_frame()
    this_month = o['7,2018'].sort_values().to_frame()
    last_month = o['6,2018'].to_frame()
    df_5 = pd.merge(last_month, this_month, left_index=True, right_index=True)
    df_5['growth'] = ((df_5['bus_name_y'] / df_5['bus_name_x']) - 1) * 100

    m_5 = ['Last month', 'This month']
    return html.Div(
                    dcc.Graph(id='graph5',
                              figure={'data': [{'x': m_5,
                                                'y': [df_5['bus_name_x']['client76'],df_5['bus_name_y']['client76']],
                                                'type': 'bar'}],
                                      'layout': {
                                          'title': 'Count of Rides'
                                      }})
                )
@app.callback(Output('graph5_4','children'),
                [Input('loc_bus5','value'),Input("first_mon_5","value")])
def update_graph5(loc5,month1_5):
    print('graph5_4')
    df_g5=df1
    df_g5.dropna(inplace=True)
    # o = df_g5.groupby([df_g5['m&y'], df_g5['bus_name']])['bus_name'].count()
    r = df1.groupby([df1['bus_name'], df1['driver_name']])['driver_name'].count()
    top_driver = r['client76'].sort_values(ascending=False).to_frame()
    top_care = [top_driver.index[0], top_driver.index[1]]

    return html.Div(
                    dcc.Graph(id='graph5',
                              figure=go.Figure(data=[
                                  go.Bar(x=top_care,
                                         y=[top_driver['driver_name'][0], top_driver['driver_name'][1]],
                                         name='The top care partners',
                                         marker_color='rgb(56, 185, 255)'
                                         ),
                                  go.Bar(x=top_care,
                                         y=[sum(top_driver['driver_name']) - top_driver['driver_name'][0],
                                            sum(top_driver['driver_name']) - top_driver['driver_name'][1]],
                                         name='Rest of the care partners',
                                         marker_color='rgb(25, 44, 99)'
                                         )],
                                  layout=go.Layout(
                                      title='Top care partners (based on number of rides)',

                                      xaxis_tickfont_size=22,

                                      yaxis=dict(
                                          title='Number of rides',
                                          titlefont_size=16,
                                          tickfont_size=14,
                                      ),
                                      legend=dict(
                                          x=1.0,
                                          y=1.0,
                                          bgcolor='rgba(255, 255, 255, 0)',
                                          bordercolor='rgba(255, 255, 255, 0)'
                                      ),
                                      barmode='stack',
                                      bargap=0.4,  # gap between bars of adjacent location coordinates.
                                      bargroupgap=0.0  # gap between bars of the same location coordinate.
                                  )
                                  )
                              ))


#default layout
bus_home = html.Div("default")


print("end of bus")
@app.callback(Output("buscontent", "children"), [Input("bus-tab", "value")])
def render_content(value):
    if value == 'bus1':
        return bus1
    elif value == 'bus2':
        return bus2
    elif value == 'bus3':
        return bus3
    elif value == 'bus3':
        return bus3
    elif value == 'bus4':
        return bus4
    elif value == 'bus5':
        return bus5
    else:
        return bus_home